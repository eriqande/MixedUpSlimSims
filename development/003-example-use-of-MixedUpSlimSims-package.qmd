---
title: "Example use of MixedUpSlimSims package"
format: 
  html:
    embed-resources: true
    df-print: kable
engine: knitr
---

This package is rolling along.  I have gotten enough things implemented
that it is now time for me to start working on evaluating the "sack-o'-segs"
model.  Another thing to do, of course, is to write some functions to simulate
the fixed markers.


## Initial set up

See the readme about configuring your system to be able to run this.

After that you can get started.

```{r}
#| message: false
library(reticulate)
library(tidyverse)
library(MixedUpSlimSims)

```

## Making allele frequencies

I am going to just make one species 0.9 at a bunch of markers and the other 0.1 at the
same markers.  This will let us verify that things are correct according to admixture
fractions easily.

We will do 2000 markers spread throughout the genome. The package has a data object,
`mykiss_chroms` that looks like this:
```{r}
mykiss_chroms %>% head()
```
that we can use to get the total length of the genome.  Note that this sort of
input tibble can be used to do everything with other genomes.

I generalized the genotype making function to take any number of populations. Also,
it seems not good to initialize the simulation with just 5 founders in one of the populations.
I just choose to initialize with 1000 individuals in each.

Here we make our allele freqs at random positions
```{r}
set.seed(1)
frqs <- tibble(
  POS = sort(runif(2000, min = 1, max = max(mykiss_chroms$cumul_end)))
) %>%
  mutate(af1 = 0.1, af2 = 0.9)

# have a look at that
frqs %>% head()
```

Now, I have modified the SLiM script to be a little more generic for testing,
and also for future versatility. It looks
like this:
```{cpp filename="Listing of inst/SLiM-models/2-pop-10-gens-vcf-initialize.slim"}
#| eval: false
#| file: ../inst/SLiM-models/2-pop-10-gens-vcf-initialize.slim
```

From that, you can see that we want to write our input file of founder genotypes
to `slim_input.vcf`.  So, simulate 1000 indivs for each population and then write
it out.
```{r}
simulate_founder_genos(frqs, N = c(1000, 1000), pop_names = c("rbt", "wct")) %>%
  write_input_vcf(out_path = "slim_input.vcf") 
```


## Running SLiM

Looking at the listing of the SLiM file, note that I have modified the output VCF
file names to just be of the form `pX-Y.vcf` where X is the population number
and Y is the SLiM year.  This will facilitate downstream analysis of things
and lets the SLiM code be much shorter.


We can just run SLiM from here. (Though for production we will run it in a temp
directory).  We will use a system call, though we could
have run it in a shell block.
```{r}
file <- system.file("SLiM-models/2-pop-10-gens-vcf-initialize.slim", package = "MixedUpSlimSims")
system(paste("slim -s 333 ", file, collapse = " "))
```

That seemed to work fine, and it wrote out some files:
```{r}
dir(pattern = "p[0-9]+-[0-9]+\\.vcf")
```

## Processing the trees

There are 11 years of simulation, so we want to get things for tree-seq years
0 to 10 from populations 1 and 2. We do that like this:
```{r}
# read the trees. Dump just captures the python code that was
# evaluated to get things in the py variable in the global env.
dump <- read_and_filter_trees(
  trees_path = "SLiM.trees",
  years_list = list(`1` = 0:10, `2` = 0:10)
)

```


Now that we have read and simplified that tree into the `py$ts` object,
we can turn it into tibbles of nodes and indivs easily:
```{r}
ni <- ts_nodes_and_inds(py$ts)
```

Now we get a vector of the founder nodes.  These are the ones
that existed at time 10 (counting backwards from 0) in TS time,
which is time 1 in SLiM time.
```{r}
founders <- founder_node_ids_and_pops(ni, 10)
```

Now we want to get the focal nodes.  These could be just the individuals
in the final three generations, but I want to plot pictures of the admixture
process in action, so I am going to make the focal individuals everyone
in SLiM year 2 and forward (so, TS time 9 and forward to 0), in both pops 1 and 2.
We designate the desired years and pops in a tibble.  The population labels
that come out of SLiM and are put into tskit at this point are base-1 indexed,
so they are named 1 and 2, not 0 and 1.
```{r}
focal_tibble <- tibble(
  pop = rep(c(1,2), each = 10),
  time = rep(0:9, 2)
)

focal_tibble
```

And we can use it in here like so:
```{r}
fnl <- get_focal_nodes(
  ni, 
  Focal = focal_tibble
)
```

Note that `fnl` has these focal nodes divided into different years, and the following
function cycles over those years and finds ancestors for each separately, because
otherwise some samples become the linked ancestors (in `link_ancestors` from tskit),
thus exluding the actual founders (this is why we couldn't use
[tspop](https://tspop.readthedocs.io/en/latest/tspop.html) for this directly---that
does not seem to handle multiple cohorts of samples)
which is not what we want here.

Now we get the ancestral segments in all of them.
```{r}
segments_tib <- ancestral_segs(
  ts = py$ts,
  focal_nodes_list = fnl,
  founder_nodes = founders$nodes,
  nodes_tib = ni$nodes_tib,
  indiv_tib = ni$indiv_tib
)
```


## Plotting the haploid ancestry segments

This is done with a simple function:
```{r}
#| fig-height: 10
#| fig-width: 8
plot_ancestry_of_genomes(segments_tib)
```


## Obtaining and plotting the ancestry tracts within each individual

There is a function for this:
```{r}
#| message: false
indiv_segs <- indiv_ancestry_tracts(segments_tib)
```

And we can plot those like this:
```{r}
#| fig-height: 10
#| fig-width: 8
plot_ancestry_tracts(indiv_segs, chrom_ends = mykiss_chroms)
```

The colors denote the different ancestry combinations, which are coded in decimal
equivalents of trits or ternary numbers.  2 = 2 doses from p1; 4 = 1 dose from p1
and one from p2; 6 is two doses from p2.  This can extend to more than two
species.  

Perhaps more explanation is needed about the trits.  We envision the number of
doses from each population as a ternary number.  In a ternary number, each 
digit can be a 0, 1, or 2.  In the 1's column ($3^0$), the 0, 1 or 2, signify
just that---a 0, 1, or 2.  In the 3's column, the values are $0=0$, $1=3$ and 
$2=6$.  And so forth (just like binary, but base 3). Since we are counting doses
the sum of all the digits themselves must be two.  Here are some examples for
a three-species case:

- 002: two copies from species 1 --- $3^2 \times 0 + 3^1 \times 0 + 3^0 \times 2 = 2$
- 011: one copy from species 1 and one copy from species 2 --- $3^2 \times 0 + 3^1 \times 1 + 3^0 \times 1 = 4$
- 020: two copies from species 2 --- $3^2 \times 0 + 3^1 \times 2 + 3^0 \times 0 = 6$
- 200: two copies from species 3 --- $3^2 \times 2 + 3^1 \times 0 + 3^0 \times 0 = 18$

Coding things this way would make it easy to extend to even more species in the future,
if needed.

## Calculating admixture fractions from the ancestry tracts

This is easily done.
```{r}
Q_values <- admixture_fracts_from_ancestry_tracts(indiv_segs)
```

And, for fun, we can plot histograms of the Q-values over time in the two populations
```{r}
#| fig-height: 10
#| fig-width: 8
Q_values %>%
  mutate(time_f = factor(ind_time, levels = rev(sort(unique(ind_time))))) %>%
  ggplot() +
  geom_histogram(aes(x = admix_fract, fill = factor(anc_pop)), alpha = 0.8, bins = 50) +
  facet_grid(time_f ~ ind_pop, scales = "free_y") +
  theme_bw()
```

Yep, that looks about right.

## Getting into the VCFs

The function `slim_vcf2long()` reads a single VCF into a long format. It uses bcftools
via a pipe to make this pretty quick and painless.  It should be noted that a long format
for this is not space-efficient at all, but for the scale of data available for
the trout, we can deal with that, and it makes it pretty convenient for other things.


```{r}
p1_10_genos <- slim_vcf2tib("p1-10.vcf")
head(p1_10_genos, n = 10)
```

Note that you can pass that function `long = FALSE` and it will return a wide tibble
that might be useful.  (Though, in practice it only saves about 50% of the memory...).
```{r}
p1_10_wide <- slim_vcf2tib("p1-10.vcf", long = FALSE)

# look at a piece of that
head(p1_10_wide[, 1:9], n = 10)
```

In practice, most of the time we will be reading in multiple VCF files.  For that we 
have another function `slim_vcfs2long()` that allows you to specify
the pops and years that you want to read. It also parses the file name and drops
some of the columns you don't need.  The years are specified in SLiM years
in a list named by the population.  For example, to get the slim years 9, 10, and 11 from
pops p1 and p2, we do this:
```{r}
sample_genos_long <- slim_vcfs2tib(Flist = list(p1 = 9:11, p2 = 9:11))
```

That is a massive tibble with 24 million rows, but it does make it quick and easy
to calculate some things as demonstrated in the next section.

### A Note on Nomenclature

Throughout this package, we use `ped_id` to be the Pedigree ID _of the individual_.
SLiM's VCF has a `slimGenomePedigreeIDs` field.  These are the pedigree IDs of the
different haplotypes/gametes, _not_ of the individuals.  We don't really use those
much after we get the individual's pedigree IDs.  So, keep in mind...`ped_id` for us
is all about pedigree ID _of the individual_.  (Same with `ped_p1` and `ped_p2`---those
are the _individual_ pedigree IDs of the parents).

## Admixture fractions and the number of 1 alleles

We have set these initial simulations up with known allele frequencies of 0.1 and
0.9 in the two populations.  This allows us to calculate the expected fraction
of 1 alleles in each individual based on their admixture fractions (calculated)
from the ancestry tracts.  By comparing this to the observed fraction of 1 alleles
in each individual from the VCF files, we can verify that everything is working
as expected, and that the IDs of the individuals we have calculated from the VCF
files correspond to the IDs we have from parsing the trees with tskit.  

We calculate the fraction of admixture from population two in each individual,
and use that to calculate the expected fraction of 1 alleles in each of the individuals
given their admixture fractions:
```{r}
efract1 <- Q_values %>%
  filter(anc_pop == 2) %>%
  select(ped_id, admix_fract) %>%
  mutate(exp_fract1 = 0.1 * (1 - admix_fract) + 0.9 * admix_fract)
```

Now, we calculate the observed fraction of 1 alleles in each sampled individual
and then join those with the values expected from their admixture fraction (joining
on `ped_id`).
```{r}
allele_1_fracts <- sample_genos_long %>%
  group_by(pop, slim_time, ped_id) %>%
  summarise(obs_fract1 = mean(allele == 1)) %>%
  ungroup() %>%
  left_join(efract1, by = join_by(ped_id)) %>%
  select(everything(), obs_fract1)
```

Now, we can plot those to confirm that we got the `ped_id`'s correct for all the
individuals, and that our segment results correspond faithfully and correctly
with our variants results.

```{r}
#| fig-width: 10
ggplot(allele_1_fracts, aes(x = exp_fract1, y = obs_fract1)) +
  geom_point(colour = "blue", alpha = 0.2) + 
  facet_grid(slim_time ~ pop) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed")
```

Perfect!

